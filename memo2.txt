# 수정사항 폐기
1. 스테이징되지 않은 변경사항 폐기
-`git restore [파일명]` : 특정 파일의 변경사항을 폐기
-Modified 상태의 변경사항을 폐기함
-주의 : 폐기한 변경사항은 복구 불가능
2. 스테이징된 파일 unstage하기
-`gir restore --staged [파일명]` : 특정 파일 unstage
-변경사항은 유지되고 스테이징만 취소됨

--------------------------------------------------------------
# .gitignore 파일
- Git이 추적하지 않을 파일을 지정하는 설정 파일
- 프로젝트 루트(최상위) 디렉토리에 위치
- 파일명은 반드시 `.gitignore`

## gitignore 작성 방법
- 한 줄에 하나의 패턴 작성
- (#)으로 시작하는 줄은 주석
- 슬래시(/)로 시작하면 하위 디렉토리에 적용되지 않음
- 슬래시(/)로 끝나면 디렉토리를 의미
- 느낌표(!)로 시작하면 무시하지 않음(예외 규칙)

## gitignore 생성 사이트
- https://www.toptal.com/developers/gitignore
- 위 사이트에서 편하게 목록을 만들 수 있다.
 
## gitignore 파일 주의사항
1. 적용 시점
- .gitignore는 새로 추가되는 파일에만 적용
- 이미 추적 중인 기존 파일은 영향을 받지 않음
2. 이미 추적 중인 파일
- .gitignore는 아직 추적되지 않은 파일에만 적용(이미 스테이징 했거나, 커밋된 파일은 무시하지 못함)
-`git rm --cached [파일명]`으로 추적 중지 필요

----

# Git 로그
-커밋 내역을 의미한다.
- git을 사용하면서 커밋했던 기록을 확인할 수 있다.

## Git 로그 확인하기
1. 기본 명령어 : `git log`
- 모든 커밋 히스토리 표시
- 최신 커밋부터 과거순으로 표시(최상단 : 최신)
- 각 커밋의 정보 포함 :
   -commit 해시값 (체크섬)
   -Author (작성자)
   - Date (작성일)
   - 커밋 메세지
2. HEAD 
- 현재 작업 중인 커밋을 가리키는 포인터
- "현재 위치"를 나타내는 것
``bash
commit 8be30cb8439085bb47bf090fa6697e9835480460 (HEAD -> main)
Author: aaa <aaa@gmail.com>
Date:   Thu Nov 28 13:40:51 2024 +0900

    modify test.txt

commit a846664a01084ed00856ed13697aed8833c6eedf
Author: aaa <aaa@gmail.com>
Date:   Thu Nov 28 13:32:59 2024 +0900

    add gitignore

commit 1c6f9a2351bedd9e611b30d26935f772b9e78950
Author: aaa <aaa@gmail.com>
Date:   Wed Nov 27 21:28:29 2024 +0900

    setting first commit
(END)
``` 

## Git 로그 주요 옵션
1. `git log -[n]`
   - 최근 [n]개의 커밋만 확인
   -`git log -2` : 최근 2개의 커밋 내역만 확인
2. `git log --oneline`
   - 한 줄로 간단히 표시
   - 해시값 축약형과 메세지만 표시
3. `git log -p`
   - 각 커밋의 변경사항도 함께 표시(diff와 함께 보는 옵션)
   - 파일의 변경 내용을 상세히 확인 가능
4. `git log --stat`
   - 각 커밋의 통계 정보 표시
   - 변경된 파일과 라인 수 표시
5. `git log --graph`
   - 브랜치와 머지 히스토리를 그래프로 표시
   - 주로 `--online`과 함께 사용

## 커밋 상세 정보 확인
1. `git show[커밋해시]`
   - 특정 커밋의 상세 정보 확인
   - 해시값(체크섬) 생략 시 최근 커밋 표시
   - 해시값은 7자만 입력해도 됨

# HEAD와 상대적 커밋 참조
1. HEAD란? 
   - 현재 작업 중인 커밋을 가리키는 포인터
   - Git에서 "현재 위치"를 나타내는 것
   - 기본적으로 가장 최근 커밋을 가리킴
2. 상대적 커밋 참조(체크섬 대신 사용 가능)
   - HEAD~N : HEAD로부터 N번째 이전 커밋
   - HEAD : 현재 커밋
   - HEAD~1 : 바로 이전 커밋
   - HEAD~2 : 2단계 이전 커밋
3. 범위 지정
   - HEAD~N..HEAD : 최근 N번째 커밋부터 현재 커밋까지
   - HEAD~3..HEAD : 최근 3번째부터 현재까지
4. log와 show등에서 활용 가능

--------------------------------------------------------------------------
# Git 커밋 되돌리기
1. amend(최근 커밋 수정)
   - `git commit --amend`
   - 마지막 커밋만 수정 가능
   - 두 가지 수정 방법 :
   1. 커밋 메세지만 수정
   2. 파일 내용도 함께 수정
   - 직전 커밋을  덮어쓰는 방식
   - 실행 시점의 스테이징 영역 기준으로 커밋을 수정함
2. reset(과거로 돌아가기)
   - `git reset[옵션][체크섬]`
   - HEAD를 특정 커밋으로 이동시키는 명령어
   - 이동한 커밋 이후의 커밋들은 모두 삭제됨
   -  세 가지 옵션 :
   - `--soft` : HEAD만 이동(스테이징 유지)
   - `--mixed` : HEAD이동 + 스테이징 취소(기본값)
   - `--hard` : HEAD이동 + 스테이징 취소+파일 변경사항 삭제(주의!)
3. revert(되돌리는 커밋 만들기)
   - `git revert[체크섬]`
   - 특정 커밋의 변경사항을 취소하는 새로운 커밋 생성
   - 기존 커밋 이력은 그대로 유지
   - 즉, 취소하려는 커밋의 기록이 유지된 상태로 취소된 상태를 새로운 커밋으로 만드는 것
   - 협업 시 권장되는 방식

## reset 옵션 상세 설명
1. --soft
   -HEAD만 이동
   -스테이징 영역과 워킹 디렉토리는 유지
   - 커밋만 최소하고 싶을 때 사용
2. --mixed
   -HEAD 이동
   -스테이징 취소
   -워킹 디렉토리는 유지
   -변경사항을 다시 정리할 때 사용
3. --hard
   -HEAD 이동
   -스테이징 취소
   -워킹 디렉토리도 초기화
   -모든 변경사항을 버릴 때 사용

## 주의 사항
1. 되돌릴 수 없는 명령어(가장 중요)
   - amend : 이전 커밋을 덮어쓰기
   - reset : 지정한 커밋으로 돌아가고 이후 커밋들을 모두 삭제
   - 특히 reset --hard는 파일까지 삭제되므로 매우 위함
2. 원격 저장소 관련
   - push된 커밋은 절대 reset/amend 사용 금지
   - 대신 revert 사용할 것
   - 이유 : 다른 개발자의 히스토리가 꼬일 수 있다.
3. 협업 시
   -revert 사용 권장(팀원과 상의 후 진행)
   -reset은 로컬에서만 사용

------------------------------------------------------------------------------------------
# 원격 저장소(Remote Repository)
- 인터넷이나 네트워크에 있는 저장소
- 여러 사람이 함께 공유할 수 있다.
- 대표적으로 Github, GitLab, BitBucket 등이 있다.

## 원격 저장소 관련 주요 명령

## remote : 원격 저장소 관리
1. `git remote add [별칭][URL]`
   - 현재 git 저장소에 원격 저장소를 추가하는 명령어
   - 여러 원격 저장소와 연결 가능
2. `git remote-v`
   - 연결된 원격 저장소 목록 확인
3. `git remote rename[기존별칭][새별칭]`
   - 원격 저장소의 별칭을 수정한다.
4. `git remote rm[별칭]`
   - 등록한 원격 저장소를 삭제한다.
### push : 원격 저장소 업로드
1. `git push [별칭][브랜치]`
   - 로컬 변경사항 커밋을 원격에 업로드
   - `git push origin main` : orgin이라는 원격저장소의 main브랜치에 업로드
2. `git push-f [별칭][브랜치]`
   - force 옵션을 사용하면 강제 push를 할 수 있음
   - 원격 커밋 내역과 로컬 커밋 내역이 일치하지 않아도 강제로 밀어 넣음
   (원격의 내용이 모두 덮어써짐)
   - 매우 위험하므로 일반적인 상황에서 사용 금지
### pull : 원격 저장소에서 다운로드
1. `git pull[별칭][브랜치]`
   - 원격 변경사항 커밋을 로컬에 다운로드
   - `git pull origin main` : origin/main에서 다운로드

## 원격 저장소를 로컬로 복제
1. clone
   -`git clone[원격저장소 URL][복제 경로]`
   - 원격 저장소를 통째로 로컬에 복제함
   - 원격 저장소의 .git폴더가 복제되므로 `git init`이 필요 없음
   - 자동으로 원격 저장소가 연결되므로 `remote add`필요 없음
   (그래도 `git remote -v`로 확인은 할 것)
   - 복제 경로에(.)을 입력하면 현재 경로에 모든 파일을 복제해줌
   

## 프로젝트 [시작할 때] 2가지 상황
- 로컬에서 처음부터 시작
   1. git init으로 저장소 생성
   2. 파일 작성 및  커밋
   3. 원격 저장소 연결(remote add)
   4. 원격에 업로드(push)
- 원격에 있는 프로젝트를 이어서 시작
   1. GitHub의 원격 저장소를 git clone으로 복제
   2. 파일 작성 및 커밋
   3. 원격에 업로드(push)


